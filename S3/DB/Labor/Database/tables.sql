CREATE TABLE land
(
lname                varchar2(30),
CONSTRAINT land_pk PRIMARY KEY (lname)
);

CREATE TABLE adresse
(
anr                 NUMBER GENERATED BY DEFAULT
					ON NULL AS IDENTITY,
nr                  integer NOT NULL,
plz                 varchar2(10) NOT NULL,
strasse             varchar2(30) NOT NULL,
stadt               varchar2(30) NOT NULL,
lname               varchar2(30) NOT NULL,
CONSTRAINT adresse_pk PRIMARY KEY (anr),
CONSTRAINT adresse_fk FOREIGN KEY (lname) REFERENCES land(lname)
);

CREATE TABLE attraktion
(
atname              varchar2(30) NOT NULL,
beschreibung        varchar2(30) NOT NULL,
CONSTRAINT attraktion_pk PRIMARY KEY (atname)
);

CREATE TABLE ausstattung
(
auname              varchar2(30) NOT NULL,
CONSTRAINT austattung_pk PRIMARY KEY (auname)
);

CREATE TABLE wohnung
(
wnr                 NUMBER GENERATED BY DEFAULT
					ON NULL AS IDENTITY,
anr                 integer NOT NULL,
wname               varchar2(30),
groesse             numeric(6, 2) NOT NULL,
preis               numeric(6, 2) NOT NULL,
anz                 integer NOT NULL,
CONSTRAINT wohnung_pk PRIMARY KEY (wnr),
CONSTRAINT wohnung_fk FOREIGN KEY (anr) REFERENCES adresse(anr)
);

CREATE TABLE entfernt
(
wnr                 integer NOT NULL,
atname              varchar2(30) NOT NULL,
entfernung          numeric(4, 2) NOT NULL,
CONSTRAINT entfernt_pk PRIMARY KEY (wnr, atname),
CONSTRAINT entfernt_fk1 FOREIGN KEY (wnr) REFERENCES wohnung(wnr) ON DELETE CASCADE,
CONSTRAINT entfernt_fk2 FOREIGN KEY (atname) REFERENCES attraktion(atname) ON DELETE CASCADE,
CONSTRAINT Entfernung CHECK (entfernung > 0 AND entfernung <= 50)
);

CREATE TABLE besitzt
(
wnr                 integer NOT NULL,
auname              varchar2(30) NOT NULL,
CONSTRAINT besitzt_pk PRIMARY KEY (wnr, auname),
CONSTRAINT besitzt_fk1 FOREIGN KEY (wnr) REFERENCES wohnung(wnr) ON DELETE CASCADE,
CONSTRAINT besitzt_fk2 FOREIGN KEY (auname) REFERENCES ausstattung(auname) ON DELETE CASCADE
);

CREATE TABLE bild
(
bildnr              NUMBER GENERATED BY DEFAULT
					ON NULL AS IDENTITY,
wnr                 integer NOT NULL,
bild                blob NOT NULL,
CONSTRAINT bild_pk PRIMARY KEY (bildnr),
CONSTRAINT bild_fk FOREIGN KEY (wnr) REFERENCES wohnung(wnr) ON DELETE CASCADE
);

--GRANT CREATE ANY directory to dbsys25;
--CREATE DIRECTORY images as '/Users/vladb/Git/htwg/S3/DB/Labor/Database/Images';
--GRANT READ ON DIRECTORY images TO dbsys25;

CREATE TABLE kunde
(
knr                 NUMBER GENERATED BY DEFAULT
					ON NULL AS IDENTITY,
anr                 integer NOT NULL,
kname               varchar2(30) NOT NULL,
vorname             varchar2(30) NOT NULL,
newsletter          char(1) CHECK (newsletter in ('Y', 'N')),
iban                varchar2(34) NOT NULL,
email               varchar2(30) NOT NULL,
CONSTRAINT kunde_pk PRIMARY KEY (knr),
CONSTRAINT kunde_fk FOREIGN KEY (anr) REFERENCES adresse(anr),
CONSTRAINT kunde_iban_format CHECK (REGEXP_LIKE (iban, '^[A-Z]{2,}[0-9]{2,28}$')),
CONSTRAINT kunde_email_format CHECK (REGEXP_LIKE (email, '^[a-zA-Z0-9.]+@[a-zA-Z0-9-]+\.[a-zA-Z]{2,}$'))
);

CREATE TABLE buchung
(
bnr                 NUMBER GENERATED BY DEFAULT
					ON NULL AS IDENTITY,
wnr                 integer NOT NULL,
knr                 integer NOT NULL,
anreise             date NOT NULL,
abreise             date NOT NULL,
bDatum              date,
beDatum             date,
anz                 integer,
rnr                 integer,
rDatum              date,
betrag              numeric(6, 2),
CONSTRAINT buchung_pk PRIMARY KEY (bnr),
CONSTRAINT buchung_fk1 FOREIGN KEY (wnr) REFERENCES wohnung(wnr),
CONSTRAINT buchung_fk2 FOREIGN KEY (knr) REFERENCES kunde(knr),
CONSTRAINT Betrag CHECK (betrag >= 0),
CONSTRAINT anzSterne CHECK (anz >= 1 AND anz <= 5),
CONSTRAINT bewertungsDatum CHECK (beDatum > abreise),
CONSTRAINT mindestZeitraum CHECK ((abreise - anreise) >= 3)
);

CREATE SEQUENCE rechnungID INCREMENT BY 1 START WITH 1 MINVALUE 0;

CREATE OR REPLACE TRIGGER check_abreise_anreise
	BEFORE INSERT OR UPDATE ON buchung
	FOR EACH ROW
BEGIN
	IF( :new.anreise < sysdate or :new.abreise < sysdate) THEN
		RAISE_APPLICATION_ERROR(-20001, 'anreise und abreise mÃ¼ssen >= aktulles Datum sein!');
	END IF;
END;
/


CREATE TABLE anzahlung
(
annr 				NUMBER GENERATED BY DEFAULT
					ON NULL AS IDENTITY,
bnr 				integer NOT NULL,
datum 				date NOT NULL,
betrag 				numeric(6, 2) NOT NULL,
CONSTRAINT anzahlung_pk PRIMARY KEY (annr),
CONSTRAINT anzahlung_fk FOREIGN KEY (bnr) REFERENCES buchung(bnr)
);
