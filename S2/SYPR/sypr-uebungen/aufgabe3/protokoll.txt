vl161bra@ct-sypr-ss20-10:~/z-drive/S2/SYPR/sypr-uebungen/aufgabe3$ make clean
rm -f stringsort stringsort.o
vl161bra@ct-sypr-ss20-10:~/z-drive/S2/SYPR/sypr-uebungen/aufgabe3$ make stringsort
gcc -g -W -Wall -Wvla -std=c11 -pedantic    stringsort.c   -o stringsort
vl161bra@ct-sypr-ss20-10:~/z-drive/S2/SYPR/sypr-uebungen/aufgabe3$ ./stringsort 200
Unsortiertes Feld:
48 136 141 173 128 157 119 29 40 145 147 40 121 173 103 181 80 12 193 183 86 58 157 115 56 154 168 133 104 80 50 104 16 192 78 97 149 149 126 142 46 25 134 167 150 190 148 30 2 142 166 41 0 75 156 56 29 124 141 85 4 192 190 20 136 20 69 85 121 148 179 167 173 66 134 124 56 83 106 10 25 72 51 177 148 7 185 129 131 79 15 87 23 157 60 159 129 129 196 2 77 176 169 51 194 55 127 50 90 33 12 67 58 16 44 158 23 182 87 107 61 54 146 84 163 6 43 92 136 191 94 13 119 15 16 113 71 95 115 161 81 128 29 139 144 25 49 119 7 136 178 20 143 125 56 106 131 51 151 19 43 197 185 162 13 153 76 36 49 191 149 130 71 130 21 15 156 70 87 115 158 17 88 101 94 144 160 178 196 111 197 39 60 182 1 73 136 29 61 137 
Sortiertes Feld:
0 1 10 101 103 104* 106* 107 111 113 115** 119** 12* 121* 124* 125 126 127 128* 129** 13* 130* 131* 133 134* 136**** 137 139 141* 142* 143 144* 145 146 147 148** 149** 15** 150 151 153 154 156* 157** 158* 159 16** 160 161 162 163 166 167* 168 169 17 173** 176 177 178* 179 181 182* 183 185* 19 190* 191* 192* 193 194 196* 197* 2* 20** 21 23* 25** 29*** 30 33 36 39 4 40* 41 43* 44 46 48 49* 50* 51** 54 55 56*** 58* 6 60* 61* 66 67 69 7* 70 71* 72 73 75 76 77 78 79 80* 81 83 84 85* 86 87** 88 90 92 94* 95 97
vl161bra@ct-sypr-ss20-10:~/z-drive/S2/SYPR/sypr-uebungen/aufgabe3$ valgrind ./stringsort 200
==5386== Memcheck, a memory error detector
==5386== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==5386== Using Valgrind-3.14.0 and LibVEX; rerun with -h for copyright info
==5386== Command: ./stringsort 200
==5386== 
Unsortiertes Feld:
48 158 121 76 146 56 128 97 30 131 141 126 10 173 105 154 39 4 20 23 147 109 15 21 142 51 95 60 188 161 139 36 71 60 112 17 117 193 114 99 76 55 25 39 180 82 193 171 87 165 194 186 75 161 7 169 164 54 29 152 167 168 188 38 181 53 55 50 46 121 101 122 128 79 161 109 161 106 32 0 72 27 186 99 188 145 20 153 151 50 105 118 170 46 156 103 99 163 105 97 84 7 171 165 38 85 26 199 191 58 152 15 85 138 114 26 36 135 179 187 137 36 58 59 82 166 163 133 130 20 182 166 179 154 131 17 39 109 169 182 168 121 198 5 11 64 31 47 151 162 187 88 199 45 100 33 163 15 167 93 35 149 12 15 55 95 32 94 5 1 29 173 74 179 130 86 43 162 85 195 124 72 35 123 69 135 109 33 102 28 78 138 129 90 153 185 186 137 31 191 
Sortiertes Feld:
0 1 10 100 101 102 103 105** 106 109*** 11 112 114* 117 118 12 121** 122 123 124 126 128* 129 130* 131* 133 135* 137* 138* 139 141 142 145 146 147 149 15*** 151* 152* 153* 154* 156 158 161*** 162* 163** 164 165* 166* 167* 168* 169* 17* 170 171* 173* 179** 180 181 182* 185 186** 187* 188** 191* 193* 194 195 198 199* 20** 21 23 25 26* 27 28 29* 30 31* 32* 33* 35* 36** 38* 39** 4 43 45 46* 47 48 5* 50* 51 53 54 55** 56 58* 59 60* 64 69 7* 71 72* 74 75 76* 78 79 82* 84 85** 86 87 88 90 93 94 95* 97* 99**
==5386== 
==5386== HEAP SUMMARY:
==5386==     in use at exit: 0 bytes in 0 blocks
==5386==   total heap usage: 203 allocs, 203 frees, 4,224 bytes allocated
==5386== 
==5386== All heap blocks were freed -- no leaks are possible
==5386== 
==5386== For counts of detected and suppressed errors, rerun with: -v
==5386== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
vl161bra@ct-sypr-ss20-10:~/z-drive/S2/SYPR/sypr-uebungen/aufgabe3$ make cppcheck
cppcheck --enable=warning,style --std=c11 stringsort.c
Checking stringsort.c ...
vl161bra@ct-sypr-ss20-10:~/z-drive/S2/SYPR/sypr-uebungen/aufgabe3$ 
vl161bra@ct-sypr-ss20-10:~/z-drive/S2/SYPR/sypr-uebungen/aufgabe3$ 
vl161bra@ct-sypr-ss20-10:~/z-drive/S2/SYPR/sypr-uebungen/aufgabe3$ 
vl161bra@ct-sypr-ss20-10:~/z-drive/S2/SYPR/sypr-uebungen/aufgabe3$ make stringsort-optimiert
gcc -g -W -Wall -Wvla -std=c11 -pedantic   -c -o stringsort-optimiert.o stringsort-optimiert.c
gcc -g   stringsort-optimiert.o   -o stringsort-optimiert
vl161bra@ct-sypr-ss20-10:~/z-drive/S2/SYPR/sypr-uebungen/aufgabe3$ ./stringsort-optimiert 200
Unsortiertes Feld:
132 163 13 93 187 153 35 188 102 27 51 155 62 152 94 90 143 171 187 178 134 169 30 134 177 149 141 161 164 5 170 48 168 183 142 156 88 177 96 142 156 147 50 170 52 144 60 195 68 47 173 154 17 155 89 194 105 30 155 21 35 125 69 155 60 163 111 148 92 160 91 48 107 141 18 111 37 78 106 105 126 32 60 143 187 101 89 92 131 196 65 118 122 135 73 134 98 137 83 191 97 126 39 156 67 58 68 56 88 126 162 14 110 174 109 98 75 198 142 6 195 8 76 69 95 101 155 193 190 38 136 39 116 128 196 183 138 16 192 26 142 154 41 53 128 102 103 155 53 197 113 0 157 189 69 52 42 176 198 33 15 134 72 131 62 20 67 152 36 59 179 131 165 172 184 45 74 39 0 127 36 113 127 194 54 148 46 96 125 196 129 92 131 154 175 145 174 194 98 163 

Sortiertes Feld:
0* 101* 102* 103 105* 106 107 109 110 111* 113* 116 118 122 125* 126** 127* 128* 129 13 131*** 132 134*** 135 136 137 138 14 141* 142*** 143* 144 145 147 148* 149 15 152* 153 154** 155***** 156** 157 16 160 161 162 163** 164 165 168 169 17 170* 171 172 173 174* 175 176 177* 178 179 18 183* 184 187** 188 189 190 191 192 193 194** 195* 196** 197 198* 20 21 26 27 30* 32 33 35* 36* 37 38 39** 41 42 45 46 47 48* 5 50 51 52* 53* 54 56 58 59 6 60** 62* 65 67* 68* 69** 72 73 74 75 76 78 8 83 88* 89* 90 91 92** 93 94 95 96* 97 98**
vl161bra@ct-sypr-ss20-10:~/z-drive/S2/SYPR/sypr-uebungen/aufgabe3$ valgrind ./stringsort-optimiert 200
==18475== Memcheck, a memory error detector
==18475== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==18475== Using Valgrind-3.14.0 and LibVEX; rerun with -h for copyright info
==18475== Command: ./stringsort-optimiert 200
==18475== 
Unsortiertes Feld:
129 159 195 1 34 119 48 178 85 121 138 103 66 46 160 49 132 82 68 6 49 149 194 78 107 99 136 146 34 84 53 116 195 49 117 29 120 118 159 6 39 97 109 106 95 22 107 179 104 176 186 105 125 132 183 184 32 71 130 66 155 136 134 102 185 52 131 57 122 90 63 161 140 125 19 187 147 127 167 3 103 105 60 180 37 195 164 69 67 46 88 174 182 22 77 119 26 160 177 148 3 192 62 143 69 81 130 168 160 49 123 63 154 183 195 192 179 111 13 198 158 53 124 92 28 153 12 54 114 189 155 117 133 17 12 3 50 94 171 11 96 95 26 50 30 22 194 161 85 160 159 43 13 84 136 41 37 100 48 103 41 155 172 174 172 184 129 174 31 101 137 127 148 164 129 130 138 124 92 23 84 51 19 49 87 107 91 77 7 91 180 0 46 153 174 170 89 56 144 72 

Sortiertes Feld:
0 1 100 101 102 103** 104 105* 106 107** 109 11 111 114 116 117* 118 119* 12* 120 121 122 123 124* 125* 127* 129** 13* 130** 131 132* 133 134 136** 137 138* 140 143 144 146 147 148* 149 153* 154 155** 158 159** 160*** 161* 164* 167 168 17 170 171 172* 174*** 176 177 178 179* 180* 182 183* 184* 185 186 187 189 19* 192* 194* 195*** 198 22** 23 26* 28 29 3** 30 31 32 34* 37* 39 41* 43 46** 48* 49**** 50* 51 52 53* 54 56 57 6* 60 62 63* 66* 67 68 69* 7 71 72 77* 78 81 82 84** 85* 87 88 89 90 91* 92* 94 95* 96 97 99
==18475== 
==18475== HEAP SUMMARY:
==18475==     in use at exit: 0 bytes in 0 blocks
==18475==   total heap usage: 4 allocs, 4 frees, 2,628 bytes allocated
==18475== 
==18475== All heap blocks were freed -- no leaks are possible
==18475== 
==18475== For counts of detected and suppressed errors, rerun with: -v
==18475== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
vl161bra@ct-sypr-ss20-10:~/z-drive/S2/SYPR/sypr-uebungen/aufgabe3$
vl161bra@ct-sypr-ss20-10:~/z-drive/S2/SYPR/sypr-uebungen/aufgabe3$ time ./stringsort 20000 > /dev/null

real	0m8,435s
user	0m5,864s
sys	0m0,012s
vl161bra@ct-sypr-ss20-10:~/z-drive/S2/SYPR/sypr-uebungen/aufgabe3$ time ./stringsort-optimiert 20000 > /dev/null

real	0m8,574s
user	0m6,162s
sys	0m0,004s


FRAGEN:

Warum ist das ein sinnvoller Wert?
'm = strlen(argv[1]) + 1' ist ein sinvoller Wert weil somit genug Platz für die Länge einer Zahl reserviert wird.
Die zufällige Zahl r liegt zwischen 0 (inkl.) und n (excl.) d.h. die Anzahl Ziffern vom r wird nie größer als die vom n.
Aus diesem Grund reicht die Anzahl Ziffern vom n aus.
Außerdem muss noch eine Position für '\0' reserviert werden.

Verhält sich das C-Programm bei allen Eingaben wie das Java-Programm?
Nein, 'java Stringsort test' ergibt eine Exception.
Während './stringsort test' verhält sich wie beim './stringsort 0'.

Meldet valgrind Fehler?
Nein.

Meldet cppcheck Probleme?
Nein.

Lässt sich Ihr Programm auch mit g++ ohne Fehlermeldungen und Warnungen übersetzen?
Ja.

Ist das speicher-optimierte Programm schneller als das nicht optimierte?
Nein.
